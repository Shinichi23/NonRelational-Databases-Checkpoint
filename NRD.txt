1 // What is and Why NoSQL ==>

What is NoSQL :

NoSQL databases are purpose built for specific data models and have flexible schemas for building modern applications.
NoSQL databases are widely recognized for their ease of development, functionality, and performance at scale.
This page includes resources to help you better understand NoSQL databases and to get started.

Why NoSQL :

NoSQL databases are a great fit for many modern applications such as mobile, web,
and gaming that require flexible, scalable, high-performance, and highly functional databases to provide great user experiences.


2 // NoSQL characteristics

  1-  It’s more than rows in tables—NoSQL systems store and retrieve data from many formats: key-value stores, graph databases, column-family (Bigtable) stores, document stores, and even rows in tables.

  2-  It’s free of joins—NoSQL systems allow you to extract your data using simple interfaces without joins.

  3-  It’s schema-free—NoSQL systems allow you to drag-and-drop your data into a folder and then query it without creating an entity-relational model.

  4-  It works on many processors—NoSQL systems allow you to store your database on multiple processors and maintain high-speed performance.

  5-  It uses shared-nothing commodity computers—Most (but not all) NoSQL systems leverage low-cost commodity processors that have separate RAM and disk.

  6-  It supports linear scalability—When you add more processors, you get a consistent increase in performance.

  7-  It’s innovative—NoSQL offers options to a single way of storing, retrieving, and manipulating data. NoSQL supporters (also known as NoSQLers) have an inclusive

  8-  attitude about NoSQL and recognize SQL solutions as viable options. To the NoSQL community, NoSQL means “Not only SQL.”


3 // NoSQL databases types

1- Key-value: Key-value databases are highly partitionable and allow horizontal scaling at scales that other types of databases cannot achieve. Use cases such as gaming, ad tech, and IoT lend themselves particularly well to the key-value data model. Amazon DynamoDB is designed to provide consistent single-digit millisecond latency for any scale of workloads. This consistent performance is a big part of why the Snapchat Stories feature, which includes Snapchat's largest storage write workload, moved to DynamoDB.
nosql_document_g

2- Document: In application code, data is represented often as an object or JSON-like document because it is an efficient and intuitive data model for developers. Document databases make it easier for developers to store and query data in a database by using the same document model format that they use in their application code. The flexible, semistructured, and hierarchical nature of documents and document databases allows them to evolve with applications’ needs. The document model works well with catalogs, user profiles, and content management systems where each document is unique and evolves over time. Amazon DocumentDB (with MongoDB compatibility) and MongoDB are popular document databases that provide powerful and intuitive APIs for flexible and iterative development.
nosql_graph_g

3- Graph: A graph database’s purpose is to make it easy to build and run applications that work with highly connected datasets. Typical use cases for a graph database include social networking, recommendation engines, fraud detection, and knowledge graphs. Amazon Neptune is a fully-managed graph database service. Neptune supports both the Property Graph model and the Resource Description Framework (RDF), providing the choice of two graph APIs: TinkerPop and RDF/SPARQL. Popular graph databases include Neo4j and Giraph.
nosql_inmemory_g

4- In-memory: Gaming and ad-tech applications have use cases such as leaderboards, session stores, and real-time analytics that require microsecond response times and can have large spikes in traffic coming at any time. Amazon ElastiCache offers Memcached and Redis, to serve low-latency, high-throughput workloads, such as McDonald’s, that cannot be served with disk-based data stores. Amazon DynamoDB Accelerator (DAX) is another example of a purpose-built data store. DAX makes DynamoDB reads an order of magnitude faster.
nosql_search_g

5- Search: Many applications output logs to help developers troubleshoot issues. Amazon Elasticsearch Service (Amazon ES) is purpose built for providing near-real-time visualizations and analytics of machine-generated data by indexing, aggregating, and searching semistructured logs and metrics. Amazon ES also is a powerful, high-performance search engine for full-text search use cases. Expedia is using more than 150 Amazon ES domains, 30 TB of data, and 30 billion documents for a variety of mission-critical use cases, ranging from operational monitoring and troubleshooting to distributed application stack tracing and pricing optimization.


4 // What is ACID  theorem

A transaction is a single logical unit of work which accesses and possibly modifies the contents of a database.
Transactions access data using read and write operations.
In order to maintain consistency in a database, before and after the transaction, certain properties are followed.
These are called ACID properties.

for more follow the link : https://www.geeksforgeeks.org/acid-properties-in-dbms/


5 // What is CAP theorem

The CAP theorem, originally introduced as the CAP principle,
can be used to explain some of the competing requirements in a distributed system with replication.
It is a tool used to makes system designers aware of the trade-offs while designing networked shared-data systems.

for more follow the link : https://www.geeksforgeeks.org/the-cap-theorem-in-dbms/


6 // NoSQL advantages

1-  Flexibility: NoSQL databases generally provide flexible schemas that enable faster and more iterative development. The flexible data model makes NoSQL databases ideal for semi-structured and unstructured data.
2-  Scalability: NoSQL databases are generally designed to scale out by using distributed clusters of hardware instead of scaling up by adding expensive and robust servers. Some cloud providers handle these operations behind-the-scenes as a fully managed service.
3-  High-performance: NoSQL database are optimized for specific data models and access patterns that enable higher performance than trying to accomplish similar functionality with relational databases.
4-  Highly functional: NoSQL databases provide highly functional APIs and data types that are purpose built for each of their respective data models.
